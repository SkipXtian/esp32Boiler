/*
* WiFi Events
0  SYSTEM_EVENT_WIFI_READY               < ESP32 WiFi ready
1  SYSTEM_EVENT_SCAN_DONE                < ESP32 finish scanning AP
2  SYSTEM_EVENT_STA_START                < ESP32 station start
3  SYSTEM_EVENT_STA_STOP                 < ESP32 station stop
4  SYSTEM_EVENT_STA_CONNECTED            < ESP32 station connected to AP
5  SYSTEM_EVENT_STA_DISCONNECTED         < ESP32 station disconnected from AP
6  SYSTEM_EVENT_STA_AUTHMODE_CHANGE      < the auth mode of AP connected by ESP32 station changed
7  SYSTEM_EVENT_STA_GOT_IP               < ESP32 station got IP from connected AP
8  SYSTEM_EVENT_STA_LOST_IP              < ESP32 station lost IP and the IP is reset to 0
9  SYSTEM_EVENT_STA_WPS_ER_SUCCESS       < ESP32 station wps succeeds in enrollee mode
10 SYSTEM_EVENT_STA_WPS_ER_FAILED        < ESP32 station wps fails in enrollee mode
11 SYSTEM_EVENT_STA_WPS_ER_TIMEOUT       < ESP32 station wps timeout in enrollee mode
12 SYSTEM_EVENT_STA_WPS_ER_PIN           < ESP32 station wps pin code in enrollee mode
13 SYSTEM_EVENT_AP_START                 < ESP32 soft-AP start
14 SYSTEM_EVENT_AP_STOP                  < ESP32 soft-AP stop
15 SYSTEM_EVENT_AP_STACONNECTED          < a station connected to ESP32 soft-AP
16 SYSTEM_EVENT_AP_STADISCONNECTED       < a station disconnected from ESP32 soft-AP
17 SYSTEM_EVENT_AP_STAIPASSIGNED         < ESP32 soft-AP assign an IP to a connected station
18 SYSTEM_EVENT_AP_PROBEREQRECVED        < Receive probe request packet in soft-AP interface
19 SYSTEM_EVENT_GOT_IP6                  < ESP32 station or ap or ethernet interface v6IP addr is preferred
20 SYSTEM_EVENT_ETH_START                < ESP32 ethernet start
21 SYSTEM_EVENT_ETH_STOP                 < ESP32 ethernet stop
22 SYSTEM_EVENT_ETH_CONNECTED            < ESP32 ethernet phy link up
23 SYSTEM_EVENT_ETH_DISCONNECTED         < ESP32 ethernet phy link down
24 SYSTEM_EVENT_ETH_GOT_IP               < ESP32 ethernet got IP from connected AP
25 SYSTEM_EVENT_MAX


*Mqtt States
-4 : MQTT_CONNECTION_TIMEOUT             < Server didn't respond within the keepalive time
-3 : MQTT_CONNECTION_LOST                < Network connection was broken
-2 : MQTT_CONNECT_FAILED                 < Network connection failed
-1 : MQTT_DISCONNECTED                   < Client is disconnected cleanly
0  : MQTT_CONNECTED                      < Client is connected
1  : MQTT_CONNECT_BAD_PROTOCOL           < Server doesn't support the requested version of MQTT
2  : MQTT_CONNECT_BAD_CLIENT_ID          < Server rejected the client identifier
3  : MQTT_CONNECT_UNAVAILABLE            < Server was unable to accept the connection
4  : MQTT_CONNECT_BAD_CREDENTIALS        < Username/password were rejected
5  : MQTT_CONNECT_UNAUTHORIZED           < Client was not authorized to connect
*/

//******************** WDT TIMEOUT CALLBACK *******************
void IRAM_ATTR resetModule()
{
    ets_printf("reboot\n");
    esp_restart();
}

void enableWDT()
{
    if (watchdog_active) return;
    watchDog_Timer = timerBegin(0, 80, true);                   //timer 0, div 80Mhz
    timerAttachInterrupt(watchDog_Timer, &resetModule, true);   //attach callback
    timerAlarmWrite(watchDog_Timer, WDT_TIMEOUT * 1000, false); //set time in us
    timerAlarmEnable(watchDog_Timer);                           //enable interrupt
    watchdog_active = true;
}

void disableWDT()
{
    if (!watchdog_active) return;
    timerAlarmDisable(watchDog_Timer);
    timerEnd(watchDog_Timer);
    watchDog_Timer = NULL;
    watchdog_active = false;
}

void feedWDT()
{
    if (watchdog_active) {
        timerWrite(watchDog_Timer, 0); //reset timer (feed watchdog)
    }
}

//*******************************MQTT**********************************
void connectMQTT()
{
    if (!client.connected()) {
        Serial.print("Connecting to MQTT...");
        Serial.println(MQTT_CLIENT_NAME);
        if (client.connect(MQTT_CLIENT_NAME, MQTT_USER, MQTT_PASS, STATE_TOPIC, 1, true, "0")) {
        // if (client.connect(MQTT_CLIENT_NAME, STATE_TOPIC, 1, true, "0")) {                         // MQTT without user/password authentication
            Serial.println("connected");
        } else {
            static int lastMqttState = MQTT_DISCONNECTED;
            int mqttState = client.state();
            if(lastMqttState != mqttState){
              switch (mqttState) {
                    case MQTT_CONNECTION_TIMEOUT:
                      logEvent("[WARN]: mqtt, Connection Timeout");
                      break;
                  case MQTT_CONNECTION_LOST:
                       logEvent("[WARN]: mqtt, Connection Lost");
                       break;
                   case MQTT_CONNECT_FAILED:
                      logEvent("[ERR]: mqtt, Connect Failed");
                      break;
                  case MQTT_DISCONNECTED:
                      logEvent("[WARN]: mqtt, Disconnected");
                      break;
                  case MQTT_CONNECT_BAD_PROTOCOL:
                      logEvent("[ERR]: mqtt, Bad Protocol");
                      break;
                  case MQTT_CONNECT_BAD_CLIENT_ID:
                      logEvent("[WARN]: mqtt, Bad Client ID");
                      break;
                  case MQTT_CONNECT_UNAVAILABLE:
                      logEvent("[WARN]: mqtt, unavailable");
                      break;
                  case MQTT_CONNECT_BAD_CREDENTIALS:
                      logEvent("[WARN]: mqtt, Bad Credentials");
                      break;
                  case MQTT_CONNECT_UNAUTHORIZED:
                      logEvent("[WARN]: mqtt, Unauthorized");
                      break;
                }
                lastMqttState = mqttState;
            }
            return;
        }
    }

    // Publishes an Alive message of the device name and IP address
    IPAddress myIP = WiFi.localIP();
    String ipString = String(myIP[0]) + "." + String(myIP[1]) + "." + String(myIP[2]) + "." + String(myIP[3]) + WiFi.RSSI();
    String aliveMsgStr = String(DEVICE_ID) + "-" + ipString;
    char aliveMsg[33];
    aliveMsgStr.toCharArray(aliveMsg, 33);
    client.publish(LOG_TOPIC, aliveMsg);

    client.publish(STATE_TOPIC, "1");

    client.subscribe(SOME_SUB_TOPIC);
}

void initOTA()
{
    // Port defaults to 3232
    // ArduinoOTA.setPort(3232);

    // Hostname defaults to esp3232-[MAC]
    // ArduinoOTA.setHostname("myesp32");

    // No authentication by default
    ArduinoOTA.setPassword(OTA_PASSWORD);

    // Password can be set with it's md5 value as well
    // MD5(admin) = 21232f297a57a5a743894a0e4a801fc3
    // ArduinoOTA.setPasswordHash("21232f297a57a5a743894a0e4a801fc3");

    ArduinoOTA
    .onStart([]() {
        String type;
        if (ArduinoOTA.getCommand() == U_FLASH)
          type = "sketch";
        else // U_SPIFFS
          type = "filesystem";

        // NOTE: if updating SPIFFS this would be the place to unmount SPIFFS using SPIFFS.end()
        Serial.println("Start updating " + type);
    })
    .onEnd([]() {
        logEvent("[INFO]: ota, Successful");
        Serial.println("\nEnd");
    })
    .onProgress([](unsigned int progress, unsigned int total) {
        Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
    })
    .onError([](ota_error_t error) {
        switch (error) {
            case OTA_AUTH_ERROR:
                logEvent("[ERR]: ota, Auth Failed");
                break;
            case OTA_BEGIN_ERROR:
                 logEvent("[ERR]: ota, Begin Failed");
                 break;
             case OTA_CONNECT_ERROR:
                logEvent("[ERR]: ota, Connect Failed");
                break;
            case OTA_RECEIVE_ERROR:
                logEvent("[ERR]: ota, Receive Failed");
                break;
            case OTA_END_ERROR:
                logEvent("[ERR]: ota, End Failed");
                break;
        }
    });

    ArduinoOTA.begin();
}


//****************************HOUSE KEEPING***********************
void WiFiEvent(WiFiEvent_t event)
{
    Serial.printf("[WiFi-event] event: %d\n", event);

    switch (event) {
        case SYSTEM_EVENT_STA_GOT_IP:
            connectionRetries = 0;
            Serial.println("WiFi connected");
            Serial.println("IP address: ");
            Serial.println(WiFi.localIP());
            connectMQTT();
            initOTA();
            timeClient.begin();
            logEvent("[INFO]: wifi, obtained IP");

        /*************** Setup webserver on the local network ***************/
            // if(MDNS.begin("vending")) {
            //     Serial.println("Error setting up MDNS responder!");
            // }
            // /* start Server */
            // server.begin();

            break;
        case SYSTEM_EVENT_STA_DISCONNECTED:
            logEvent("[WARN]: wifi, disconnected");
            Serial.println("WiFi lost connection");
            connectionRetries = 5;                    //Setup the amount of time to atempt to reconnect to wifi
            break;
    }
}


void houseKeeping()
{
    feedWDT();
    if(WiFi.status() != WL_CONNECTED && connectionRetries > 0) {
        static unsigned long lastConnectionAtemptTime = 0;
        unsigned long timeNow = millis();
        if(timeNow - lastConnectionAtemptTime > CONNECTION_RETRY_TIME){
            WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
            connectionRetries--;
            lastConnectionAtemptTime = timeNow;
        }
    } else {
      if (client.state() <= MQTT_DISCONNECTED && WiFi.status() == WL_CONNECTED){
          connectMQTT();
      }
      if (client.state() == MQTT_CONNECTED){
          client.loop();
      }
      ArduinoOTA.handle();
      timeClient.update();

      /* mDNS stuff ******   listen for client */
        // WiFiClient client = server.available();
        // uint8_t data[30];
        // if (client) {
        //     Serial.println("new client");
        //     /* check client is connected */
        //     while (client.connected()) {
        //         if (client.available()) {
        //             int len = client.read(data, 30);
        //             if(len < 30){
        //                 data[len] = '\0';
        //             }else {
        //                 data[29] = '\0';
        //             }
        //             Serial.print("client sent: ");
        //             Serial.println((char *)data);
        //         }
        //     }
        // }
    }
}

/*
* WiFi Events
0  SYSTEM_EVENT_WIFI_READY               < ESP32 WiFi ready
1  SYSTEM_EVENT_SCAN_DONE                < ESP32 finish scanning AP
2  SYSTEM_EVENT_STA_START                < ESP32 station start
3  SYSTEM_EVENT_STA_STOP                 < ESP32 station stop
4  SYSTEM_EVENT_STA_CONNECTED            < ESP32 station connected to AP
5  SYSTEM_EVENT_STA_DISCONNECTED         < ESP32 station disconnected from AP
6  SYSTEM_EVENT_STA_AUTHMODE_CHANGE      < the auth mode of AP connected by ESP32 station changed
7  SYSTEM_EVENT_STA_GOT_IP               < ESP32 station got IP from connected AP
8  SYSTEM_EVENT_STA_LOST_IP              < ESP32 station lost IP and the IP is reset to 0
9  SYSTEM_EVENT_STA_WPS_ER_SUCCESS       < ESP32 station wps succeeds in enrollee mode
10 SYSTEM_EVENT_STA_WPS_ER_FAILED        < ESP32 station wps fails in enrollee mode
11 SYSTEM_EVENT_STA_WPS_ER_TIMEOUT       < ESP32 station wps timeout in enrollee mode
12 SYSTEM_EVENT_STA_WPS_ER_PIN           < ESP32 station wps pin code in enrollee mode
13 SYSTEM_EVENT_AP_START                 < ESP32 soft-AP start
14 SYSTEM_EVENT_AP_STOP                  < ESP32 soft-AP stop
15 SYSTEM_EVENT_AP_STACONNECTED          < a station connected to ESP32 soft-AP
16 SYSTEM_EVENT_AP_STADISCONNECTED       < a station disconnected from ESP32 soft-AP
17 SYSTEM_EVENT_AP_STAIPASSIGNED         < ESP32 soft-AP assign an IP to a connected station
18 SYSTEM_EVENT_AP_PROBEREQRECVED        < Receive probe request packet in soft-AP interface
19 SYSTEM_EVENT_GOT_IP6                  < ESP32 station or ap or ethernet interface v6IP addr is preferred
20 SYSTEM_EVENT_ETH_START                < ESP32 ethernet start
21 SYSTEM_EVENT_ETH_STOP                 < ESP32 ethernet stop
22 SYSTEM_EVENT_ETH_CONNECTED            < ESP32 ethernet phy link up
23 SYSTEM_EVENT_ETH_DISCONNECTED         < ESP32 ethernet phy link down
24 SYSTEM_EVENT_ETH_GOT_IP               < ESP32 ethernet got IP from connected AP
25 SYSTEM_EVENT_MAX
*/

//******************** WDT TIMEOUT CALLBACK *******************
void IRAM_ATTR resetModule()
{
    ets_printf("reboot\n");
    esp_restart();
}

void enableWDT()
{
    if (watchdog_active) return;
    watchDog_Timer = timerBegin(0, 80, true);                   //timer 0, div 80Mhz
    timerAttachInterrupt(watchDog_Timer, &resetModule, true);   //attach callback
    timerAlarmWrite(watchDog_Timer, WDT_TIMEOUT * 1000, false); //set time in us
    timerAlarmEnable(watchDog_Timer);                           //enable interrupt
    watchdog_active = true;
}

void disableWDT()
{
    if (!watchdog_active) return;
    timerAlarmDisable(watchDog_Timer);
    timerEnd(watchDog_Timer);
    watchDog_Timer = NULL;
    watchdog_active = false;
}

void feedWDT()
{
    if (watchdog_active) {
        timerWrite(watchDog_Timer, 0); //reset timer (feed watchdog)
    }
}

//*******************************MQTT**********************************
void connectToWifi()
{
  //Serial.println("Connecting to Wi-Fi...");
    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
}

void connectToMqtt()
{
  //Serial.println("Connecting to MQTT...");
    mqttClient.connect();
}

void WiFiEvent(WiFiEvent_t event)
{
    Serial.printf("[WiFi-event] event: %d\n", event);
    switch(event) {
        case SYSTEM_EVENT_STA_GOT_IP:
            logEvent("[INFO]: wifi, obtained IP");
            Serial.println("WiFi connected");
            Serial.println("IP address: ");
            Serial.println(WiFi.localIP());
            connectToMqtt();
            initOTA();
            timeClient.begin();
//
//         /*************** Setup webserver on the local network ***************/
//             // if(MDNS.begin("vending")) {
//             //     Serial.println("Error setting up MDNS responder!");
//             // }
//             // /* start Server */
//             // server.begin();
            break;
        case SYSTEM_EVENT_STA_DISCONNECTED:
            logEvent("[WARN]: wifi, disconnected");
            xTimerStop(mqttReconnectTimer, 0); // ensure we don't reconnect to MQTT while reconnecting to Wi-Fi
		    xTimerStart(wifiReconnectTimer, 0);
            break;
    }
}

void onMqttConnect(bool sessionPresent)
{
    IPAddress myIP = WiFi.localIP();
    String aliveMsgStr = String(myIP[0]) + "." + String(myIP[1]) + "." + String(myIP[2]) + "." + String(myIP[3]) + String(WiFi.RSSI());
    char aliveMsg[20];
    aliveMsgStr.toCharArray(aliveMsg, 20);
    mqttClient.publish(STATE_TOPIC, 0, 1, aliveMsg);  //topic, QOS, retain, message
    logEvent("[INFO]: mqtt, Connected as " MQTT_CLIENT_NAME);

    mqttClient.subscribe(SOME_SUB_TOPIC, 1);          //topic, QOS
    logEvent("[INFO]: mqtt, Subscribed: " SOME_SUB_TOPIC);
}

void onMqttDisconnect(AsyncMqttClientDisconnectReason reason)
{
    static int8_t lastDisconnectReason = int(AsyncMqttClientDisconnectReason::TCP_DISCONNECTED);
    if (lastDisconnectReason != int(reason)){
        switch (reason) {
            case AsyncMqttClientDisconnectReason::TCP_DISCONNECTED:
                logEvent("[WARN]: mqtt, TCP disconnect");
                break;
            case AsyncMqttClientDisconnectReason::MQTT_UNACCEPTABLE_PROTOCOL_VERSION:
                 logEvent("[WARN]: mqtt, Bad Protocol");
                 break;
            case AsyncMqttClientDisconnectReason::MQTT_IDENTIFIER_REJECTED:
                logEvent("[WARN]: mqtt, Bad Client ID");
                break;
            case AsyncMqttClientDisconnectReason::MQTT_SERVER_UNAVAILABLE:
                logEvent("[WARN]: mqtt, unavailable");
                break;
            case AsyncMqttClientDisconnectReason::MQTT_MALFORMED_CREDENTIALS:
                logEvent("[WARN]: mqtt, Bad Credentials");
                break;
            case AsyncMqttClientDisconnectReason::MQTT_NOT_AUTHORIZED:
                logEvent("[WARN]: mqtt, Unauthorized");
                break;
            case AsyncMqttClientDisconnectReason::TLS_BAD_FINGERPRINT:
                logEvent("[ERR]: mqtt, Bad Fingerprint");
                break;
        }
        lastDisconnectReason = int(reason);
    }
    if (WiFi.isConnected()) {
      xTimerStart(mqttReconnectTimer, 0);
    }
}

// void onMqttSubscribe(uint16_t packetId, uint8_t qos)
// {
  //   Serial.println("Subscribe acknowledged.");
  //   Serial.print("  packetId: ");
  //   Serial.println(packetId);
  //   Serial.print("  qos: ");
  //   Serial.println(qos);
// }
//
// void onMqttUnsubscribe(uint16_t packetId)
// {
  //   Serial.println("Unsubscribe acknowledged.");
  //   Serial.print("  packetId: ");
  //   Serial.println(packetId);
// }

void onMqttMessage(char* topic, char* payload, AsyncMqttClientMessageProperties properties, size_t len, size_t index, size_t total)
{
    //Serial.println("Publish received.");
    //Serial.print("  topic: ");
    //Serial.println(topic);
    //Serial.print("  qos: ");
    //Serial.println(properties.qos);
    //Serial.print("  dup: ");
    //Serial.println(properties.dup);
    //Serial.print("  retain: ");
    //Serial.println(properties.retain);
    //Serial.print("  len: ");
    //Serial.println(len);
    //Serial.print("  index: ");
    //Serial.println(index);
    //Serial.print("  total: ");
    //Serial.println(total);
}

// void onMqttPublish(uint16_t packetId)
// {
    //Serial.println("Publish acknowledged.");
    //Serial.print("  packetId: ");
    //Serial.println(packetId);
// }

void initWifi()
{
    mqttReconnectTimer = xTimerCreate("mqttTimer", pdMS_TO_TICKS(2000), pdFALSE, (void*)0, reinterpret_cast<TimerCallbackFunction_t>(connectToMqtt));
    wifiReconnectTimer = xTimerCreate("wifiTimer", pdMS_TO_TICKS(5000), pdFALSE, (void*)0, reinterpret_cast<TimerCallbackFunction_t>(connectToWifi));

    WiFi.onEvent(WiFiEvent);

    mqttClient.onConnect(onMqttConnect);
    mqttClient.onDisconnect(onMqttDisconnect);
    // mqttClient.onSubscribe(onMqttSubscribe);
    // mqttClient.onUnsubscribe(onMqttUnsubscribe);
    mqttClient.onMessage(onMqttMessage);
    // mqttClient.onPublish(onMqttPublish);
    mqttClient.setClientId(MQTT_CLIENT_NAME);
    mqttClient.setCredentials(MQTT_USER, MQTT_PASS);
    mqttClient.setWill(STATE_TOPIC, 1, 1, "0", 0); //const char* topic, uint8_t qos, bool retain, const char* payload = nullptr, size_t length = 0
    mqttClient.setServer(MQTT_SERVER, MQTT_PORT);

    connectToWifi();
}


void initOTA()
{
    // Port defaults to 3232
    // ArduinoOTA.setPort(3232);

    // Hostname defaults to esp3232-[MAC]
    // ArduinoOTA.setHostname("myesp32");

    // No authentication by default
    ArduinoOTA.setPassword(OTA_PASSWORD);

    // Password can be set with it's md5 value as well
    // MD5(admin) = 21232f297a57a5a743894a0e4a801fc3
    // ArduinoOTA.setPasswordHash("21232f297a57a5a743894a0e4a801fc3");

    ArduinoOTA
    .onStart([]() {
        String type;
        if (ArduinoOTA.getCommand() == U_FLASH)
          type = "sketch";
        else // U_SPIFFS
          type = "filesystem";

        // NOTE: if updating SPIFFS this would be the place to unmount SPIFFS using SPIFFS.end()
        Serial.println("Start updating " + type);
    })
    .onEnd([]() {
        logEvent("[INFO]: ota, Successful");
        Serial.println("\nEnd");
    })
    .onProgress([](unsigned int progress, unsigned int total) {
        Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
    })
    .onError([](ota_error_t error) {
        switch (error) {
            case OTA_AUTH_ERROR:
                logEvent("[ERR]: ota, Auth Failed");
                break;
            case OTA_BEGIN_ERROR:
                 logEvent("[ERR]: ota, Begin Failed");
                 break;
             case OTA_CONNECT_ERROR:
                logEvent("[ERR]: ota, Connect Failed");
                break;
            case OTA_RECEIVE_ERROR:
                logEvent("[ERR]: ota, Receive Failed");
                break;
            case OTA_END_ERROR:
                logEvent("[ERR]: ota, End Failed");
                break;
        }
    });

    ArduinoOTA.begin();
}


void houseKeeping()
{
    feedWDT();
    if(WiFi.status() == WL_CONNECTED){
      ArduinoOTA.handle();
      timeClient.update();
    }
      /* mDNS stuff ******   listen for client */
        // WiFiClient client = server.available();
        // uint8_t data[30];
        // if (client) {
        //     Serial.println("new client");
        //     /* check client is connected */
        //     while (client.connected()) {
        //         if (client.available()) {
        //             int len = client.read(data, 30);
        //             if(len < 30){
        //                 data[len] = '\0';
        //             }else {
        //                 data[29] = '\0';
        //             }
        //             Serial.print("client sent: ");
        //             Serial.println((char *)data);
        //         }
        //     }
        // }
    // }
}
